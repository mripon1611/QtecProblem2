// first get a input as text 
const text = "tadadattaetadadadafa";
// first get a input as pattern 
const pattern = "dada";

//initially find length (text and pattern)
let lenText = text.length;
let lenPattern = pattern.length;
//initial the counting value
let count = 0;

//this condition will check the lenght of pattern less or equal of the length text. If length of pattern greater than the length of text then the result will be 0 directly;
if(lenPattern <= lenText){
    //first outer loop, which works on text string
    for(let i = 0; i < (lenText-lenPattern); i++){
        //If text[i] is not equal of pattern[0] then the if condition never execute
        if(text[i] == pattern[0]){
            //just declere a variable
            let j;
            //First inner loop, which will works on pattern string, and the loop index start with 1 because pattern[0] compare before
            for(j = 1; j < lenPattern; j++){
                //chek text[i+j] equal or not.If not equal then break the loop
                if(text[i+j] != pattern[j]){
                    break;
                }
            }
            //If here value of j is equal lenPattern, then I take a decision found and increment the value of count by 1. 
            if(j==lenPattern){
                count += 1;
            }
        }
    }
}

//Here is the result
console.log(`Here the pattern '${pattern}' appears in text ('${text}') ${count} times`);


//If lenght of text is n and lenght of pattern is m. Then the overall time complexity is : O(nm)